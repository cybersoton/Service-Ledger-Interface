---
swagger: "2.0"
info:
  version: "2.2.0"
  title: "SUNFISH Service Ledger Interface"
  contact:
    name: "Andrea Margheri"
    email: "a.margheri@soton.ac.uk"
basePath: "/sli"
tags:
- name: "policy"
- name: "dm"
- name: "anonymisation"
- name: "alert"
- name: "monitoring"
- name: "state"
- name: "proposal"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /policy/store:
    post:
      tags:
      - "policy"
      description: "Storing a new policy\n"
      operationId: "policyStorePOST"
      parameters:
      - in: "body"
        name: "policySpec"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/policy-request-body"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/ack-response"
        400:
          description: "Invalid request, required parameter(s) missing."
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
        409:
          description: "The operation is not allowed as the policy already exists."
      x-swagger-router-controller: "Policy"
  /policy/read:
    post:
      tags:
      - "policy"
      description: "Retrieving a policy by its id\n"
      operationId: "policyReadPOST"
      parameters:
      - in: "body"
        name: "policyId"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/query-request"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/policy-response"
        400:
          description: "Invalid request, required parameter(s) missing"
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
        404:
          description: "The requested policy is not found."
      x-swagger-router-controller: "Policy"
  /policy/polService:
    post:
      tags:
      - "policy"
      description: "Retrieving policies associated to a service\n"
      operationId: "policyPolServicePOST"
      parameters:
      - in: "body"
        name: "serviceId"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/policy-ofservice-body"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/policy-ofservice-response"
        400:
          description: "Invalid request, required parameter(s) missing"
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
      x-swagger-router-controller: "Policy"
  /policy/delete:
    post:
      tags:
      - "policy"
      description: "Deleting a policy by its id\n"
      operationId: "policyDeletePOST"
      parameters:
      - in: "body"
        name: "policyId"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/query-request"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/ack-response"
        400:
          description: "Invalid request, required parameter(s) missing"
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
        404:
          description: "The respective policy is not found."
      x-swagger-router-controller: "Policy"
  /dm/store:
    post:
      tags:
      - "dm"
      description: "Storing encryption/tokenization key\n"
      operationId: "dmStorePOST"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/dm-store-body"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/ack-response"
        400:
          description: "Invalid request, required parameter(s) missing."
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
      x-swagger-router-controller: "Dm"
  /dm/read:
    post:
      tags:
      - "dm"
      description: "Retrieving a stored key\n"
      operationId: "dmReadPOST"
      parameters:
      - in: "body"
        name: "body"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/query-request"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/ack-response"
        400:
          description: "Invalid request, required parameter(s) missing"
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
      x-swagger-router-controller: "Dm"
  /dm/delete:
    post:
      tags:
      - "dm"
      description: "Delete a stored key\n"
      operationId: "dmDeletePOST"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/query-request"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/ack-response"
        400:
          description: "Invalid request, required parameter(s) missing"
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
      x-swagger-router-controller: "Dm"
  /anonymisation/register:
    post:
      tags:
      - "anonymisation"
      description: "This endpoint is used to register a data-sharing event.\n"
      operationId: "anonymisationRegisterToRegistry"
      parameters:
      - in: "body"
        name: "body"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/anony-register-body"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/anony-register-response"
        400:
          description: "Invalid request, required parameter(s) missing."
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
      x-swagger-router-controller: "Anonymisation"
  /anonymisation/queryOldRes:
    post:
      tags:
      - "anonymisation"
      description: "This endpoint is used to query the anonymised statistical result\
        \ in Registry given  the DataId and requested budget.\n"
      operationId: "anonymisationQueryOldRes"
      parameters:
      - in: "body"
        name: "body"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/anony-query-body"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/anony-query-response"
        400:
          description: "Invalid request, required parameter(s) missing"
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)"
      x-swagger-router-controller: "Anonymisation"
  /anonymisation/receiveAnonyRes:
    post:
      tags:
      - "anonymisation"
      description: "this endpoint is used to receive anonymised result from the anonymisation\
        \ interface"
      operationId: "anonymisationReceiveAnonyRes"
      parameters:
      - in: "body"
        name: "body"
        description: "JSON body of the received result"
        required: true
        schema:
          $ref: "#/definitions/anony-result-body"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/receive-result-response"
        400:
          description: "Invalid request, required parameter(s) missing"
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \  is invalid, etc.)"
      x-swagger-router-controller: "Anonymisation"
  /anonymisation/updateLedger:
    post:
      tags:
      - "anonymisation"
      description: "this endpoint is used to update final result to Registry"
      operationId: "anonymisationUpdateLedger"
      parameters:
      - in: "body"
        name: "body"
        description: "JSON body of the received result"
        required: true
        schema:
          $ref: "#/definitions/update-ledger-body"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/update-ledger-response"
        400:
          description: "Invalid request, required parameter(s) missing"
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \  is invalid, etc.)"
      x-swagger-router-controller: "Anonymisation"
  /alert/store:
    post:
      tags:
      - "alert"
      description: "This endpoint is used to store alerts.\n"
      operationId: "alertStorePOST"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/alert-store"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/ack-response"
        400:
          description: "Invalid request, required parameter(s) missing."
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
      x-swagger-router-controller: "Alert"
  /alert/read:
    post:
      tags:
      - "alert"
      description: "This endpoint is used to retrieve the stored alert using the index.\
        \ The body contains the alert id received by the store api\n"
      operationId: "alertReadPOST"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/query-request"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/alert-body"
        400:
          description: "Invalid request, required parameter(s) missing."
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
      x-swagger-router-controller: "Alert"
  /monitoring/store:
    post:
      tags:
      - "monitoring"
      description: "This endpoint is used to store relevant monitoring data.\n"
      operationId: "monitoringStorePOST"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/monitoring-store"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/ack-response"
        400:
          description: "Invalid request, required parameter(s) missing."
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
      x-swagger-router-controller: "Monitoring"
  /monitoring/read:
    post:
      tags:
      - "monitoring"
      description: "This endpoint is used to read the relevant monitoring data.\n"
      operationId: "monitoringReadPOST"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/query-request"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/monitoring-response"
        400:
          description: "Invalid request, required parameter(s) missing."
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
      x-swagger-router-controller: "Monitoring"
  /state/getKeys:
    post:
      tags:
      - "state"
      description: "Get all the key of a category\n"
      operationId: "stateGetKeysPOST"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/key-get-body"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/key-response"
        400:
          description: "Invalid request, required parameter(s) missing."
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
      x-swagger-router-controller: "State"
  /state/service-store:
    post:
      tags:
      - "state"
      description: "Storing federated services\n"
      operationId: "stateService_storePOST"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/state-service-store-body"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/ack-response"
        400:
          description: "Invalid request, required parameter(s) missing."
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
      x-swagger-router-controller: "State"
  /state/service-read:
    post:
      tags:
      - "state"
      description: "Storing federated services\n"
      operationId: "stateService_readPOST"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body in JSON cotaining the service id"
        required: true
        schema:
          $ref: "#/definitions/query-request"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/state-service-request-body"
        400:
          description: "Invalid request, required parameter(s) missing."
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
      x-swagger-router-controller: "State"
  /state/member-store:
    post:
      tags:
      - "state"
      description: "Storing federated services\n"
      operationId: "stateMember_storePOST"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/state-member-store-body"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/ack-response"
        400:
          description: "Invalid request, required parameter(s) missing."
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
      x-swagger-router-controller: "State"
  /state/member-read:
    post:
      tags:
      - "state"
      description: "Storing federated services\n"
      operationId: "stateMember_readPOST"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body in JSON cotaining the service id"
        required: true
        schema:
          $ref: "#/definitions/query-request"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/state-member-request-body"
        400:
          description: "Invalid request, required parameter(s) missing."
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
      x-swagger-router-controller: "State"
  /state/vm-store:
    post:
      tags:
      - "state"
      description: "Storing federated services\n"
      operationId: "stateVm_storePOST"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/state-vm-store-body"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/ack-response"
        400:
          description: "Invalid request, required parameter(s) missing."
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
      x-swagger-router-controller: "State"
  /state/vm-read:
    post:
      tags:
      - "state"
      description: "Storing federated services\n"
      operationId: "stateVm_readPOST"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body in JSON cotaining the vm id"
        required: true
        schema:
          $ref: "#/definitions/query-request"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/state-vm-request-body"
        400:
          description: "Invalid request, required parameter(s) missing."
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
      x-swagger-router-controller: "State"
  /state/tenant-create:
    post:
      tags:
      - "state"
      description: "Creating a tenant\n"
      operationId: "stateTenant_createPOST"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/state-tenant-store-body"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/ack-response"
        400:
          description: "Invalid request, required parameter(s) missing."
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
      x-swagger-router-controller: "State"
  /state/tenant-addMember:
    post:
      tags:
      - "state"
      description: "Creating a tenant\n"
      operationId: "stateTenant_addMemberPOST"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/state-tenant-store-member-body"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/ack-response"
        400:
          description: "Invalid request, required parameter(s) missing."
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
      x-swagger-router-controller: "State"
  /state/tenant-read:
    post:
      tags:
      - "state"
      description: "Storing federated services\n"
      operationId: "stateTenant_readPOST"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body in JSON cotaining the service id"
        required: true
        schema:
          $ref: "#/definitions/query-request"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/state-tenant-request-body"
        400:
          description: "Invalid request, required parameter(s) missing."
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
      x-swagger-router-controller: "State"
  /proposal/submitProposal:
    post:
      tags:
      - "proposal"
      description: "Submitting a proposal \n"
      operationId: "proposalSubmitProposalPOST"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/submit-proposal-body"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/ack-response"
        400:
          description: "Invalid request, required parameter(s) missing."
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
      x-swagger-router-controller: "Proposal"
  /proposal/getProposal:
    post:
      tags:
      - "proposal"
      description: "getting a proposal\n"
      operationId: "proposalGetProposalPOST"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/get-proposal-body"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/get-proposal-response"
        400:
          description: "Invalid request, required parameter(s) missing."
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.).      "
      x-swagger-router-controller: "Proposal"
  /proposal/voteProposal:
    post:
      tags:
      - "proposal"
      description: "vote for a submitted a proposal \n"
      operationId: "proposalVoteProposalPOST"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/vote-proposal-body"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/ack-response"
        400:
          description: "Invalid request, required parameter(s) missing."
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
      x-swagger-router-controller: "Proposal"
  /proposal/countVotes:
    post:
      tags:
      - "proposal"
      description: "Request a votes counting to validate a stored proposal \n"
      operationId: "proposalCountVotesPOST"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/countvotes-proposal-body"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/countvotes-proposal-response"
        400:
          description: "Invalid request, required parameter(s) missing."
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
      x-swagger-router-controller: "Proposal"
definitions:
  policy-request-body:
    type: "object"
    required:
    - "expirationTime"
    - "policy"
    - "policyId"
    - "requestorID"
    - "token"
    properties:
      requestorID:
        type: "string"
        description: "Identifier of the requesting entity."
      token:
        type: "string"
        description: "A crypto token to validate if the entity is allowed to perform\
          \ the requested operation."
      policy:
        type: "string"
        description: "Base64-encoded policy data."
      expirationTime:
        type: "string"
        description: "Specifies the expiration time of the policy in milli-seconds\
          \ starting from midnight, January 1, 1970 UTC. After this time the policy\
          \ set must not be used."
      policyId:
        type: "string"
        description: "The identifer for the policy."
      serviceID:
        type: "string"
        description: "The identifier of the service this policy applies to."
      policyType:
        type: "string"
        description: "The type of the policy."
    description: "HTTP body defining the input for the store operation of policy"
  policy-ofservice-body:
    type: "object"
    required:
    - "policyType"
    - "requestorID"
    - "serviceID"
    - "token"
    properties:
      requestorID:
        type: "string"
        description: "Identifier of the requesting entity."
      token:
        type: "string"
        description: "A crypto token to validate if the entity is allowed to perform\
          \ the requested operation."
      serviceID:
        type: "string"
        description: "Specifies the service identifier to be used to retrieve the\
          \ set of policies belonging to that identifier."
      policyType:
        type: "string"
        description: "The type of the policy."
    description: "HTTP body defining the read operation for the /read endpoint"
  policy-ofservice-response:
    type: "object"
    required:
    - "list"
    properties:
      list:
        type: "array"
        items:
          $ref: "#/definitions/policyofserviceresponse_list"
    description: "HTTP response containing the list of policies for the service."
  policy-response:
    type: "object"
    required:
    - "expirationTime"
    - "message"
    - "policy"
    properties:
      policy:
        type: "string"
        description: "BASE64-enocded data of the requested policy."
      expirationTime:
        type: "string"
        description: "Specifies the expiration time of the policy set in milliseconds\
          \ starting from midnight, January 1, 1970 UTC. After this time the policy\
          \ set must not be used."
      message:
        type: "string"
        description: "message of the operation status"
    description: "HTTP response for a successful read operation"
  dm-store-body:
    type: "object"
    required:
    - "dataID"
    - "key"
    - "requestorID"
    - "token"
    properties:
      requestorID:
        type: "string"
        description: "Identifier of the requesting entity."
      token:
        type: "string"
        description: "A crypto token to validate if the entity is allowed to perform\
          \ the requested operation."
      dataID:
        type: "string"
        description: "Identifier of the dataset that the key relates to."
      key:
        type: "string"
        description: "Key to be registered."
  anony-register-body:
    type: "object"
    required:
    - "dataID"
    - "data_consumer"
    - "data_provider"
    - "requestorID"
    - "time_stamp"
    - "token"
    properties:
      requestorID:
        type: "string"
        description: "Identifier of the requesting entity."
      token:
        type: "string"
        description: "A crypto token to validate if the entity is allowed to perform\
          \ the requested operation."
      data_provider:
        type: "string"
        description: "The name of the data provider who shares a dataset."
      data_consumer:
        type: "string"
        description: "The name of the data consumer who receives a dataset."
      time_stamp:
        type: "string"
        description: "The timestamp in the following format - \"2006-01-02 15:04:05\""
      dataID:
        type: "string"
        description: "Identifier of the shared dataset."
    description: "HTTP body defining the register operation for the /anonymisation/register\
      \ endpoint."
  anony-register-response:
    type: "object"
    required:
    - "message"
    properties:
      message:
        type: "string"
        description: "a message in JSON format signifying that the data has been registered."
    description: "HTTP response for a successful register operation"
  anony-query-body:
    type: "object"
    required:
    - "dataID"
    - "data_consumer"
    - "function_type"
    - "request_budget"
    - "requestorID"
    - "token"
    properties:
      requestorID:
        type: "string"
        description: "Identifier of the requesting entity."
      token:
        type: "string"
        description: "A crypto token to validate if the entity is allowed to perform\
          \ the requested operation."
      data_consumer:
        type: "string"
        description: "The name of the data consumer who receives a dataset."
      dataID:
        type: "string"
        description: "The unique ID of a dataset"
      function_type:
        type: "string"
        description: "The queried function type"
      request_budget:
        type: "number"
        description: "The requested budget of differential privacy"
    description: "HTTP body defining the query operation for the /anonymisation/queryOldRes\
      \ endpoint"
  anony-query-response:
    type: "object"
    required:
    - "budget_used"
    - "dataID"
    - "data_consumer"
    - "data_provider"
    - "ifExist"
    - "time_stamp"
    properties:
      data_provider:
        type: "string"
        description: "The name of the data provider who shares a dataset."
      data_consumer:
        type: "string"
        description: "The name of the data consumer who receives a dataset."
      time_stamp:
        type: "string"
        description: "The timestamp in the following format - \"2006-01-02 15:04:05\""
      dataID:
        type: "string"
        description: "Identifier of the shared dataset."
      ifExist:
        type: "number"
        description: "0 -- old result does not exist; otherwise -- 1"
      budget_used:
        type: "number"
        description: "budget consumed"
    description: "HTTP response for a successful read operation"
  anony-result-body:
    type: "object"
    required:
    - "anonymised_result"
    - "budget_used"
    - "dataID"
    - "data_consumer"
    - "function_type"
    - "requestorID"
    - "token"
    properties:
      requestorID:
        type: "string"
        description: "Indentifier of the requesting body"
      token:
        type: "string"
        description: "a crypto token to validate if the entity is allowed to perform\
          \ the  requested operation."
      data_consumer:
        type: "string"
        description: "the name of the data consumer who receives a dataset"
      dataID:
        type: "string"
        description: "the unique ID of a dataset"
      function_type:
        type: "string"
        description: "the queried function type"
      budget_used:
        type: "number"
        description: "the budget used of differential privacy"
      anonymised_result:
        type: "number"
        description: "the anonymised result from anonymisation interface"
    description: "HTTP body definiting the query operation for the  /ri/anonymisation/receiveAnonyRes\
      \ endpoint"
  receive-result-response:
    type: "object"
    required:
    - "final_result"
    - "final_status"
    properties:
      final_status:
        type: "number"
        description: "the statue of the final result (0 -- null result)"
      final_result:
        type: "number"
        description: "the anonymised result from anonymisation interface"
    description: "HTTP response definiting the query operation for the /ri/anonymisation/receiveAnonyRes\
      \ endpoint"
  update-ledger-body:
    type: "object"
    required:
    - "anonymised_result"
    - "dataID"
    - "data_consumer"
    - "data_provider"
    - "time_stamp"
    properties:
      data_provider:
        type: "string"
        description: "The name of the data provider who shares a dataset."
      data_consumer:
        type: "string"
        description: "The name of the data consumer who receives a dataset."
      time_stamp:
        type: "string"
        description: "The timestamp in the following format - \"2006-01-02 15:04:05\""
      dataID:
        type: "string"
        description: "Identifier of the shared dataset."
      anonymised_result:
        type: "number"
        description: "the final anonymised result"
    description: "HTTP body definiting the update ledger operation for the  /ri/anonymisation/updateLedger\
      \ endpoint"
  update-ledger-response:
    type: "string"
    required:
    - "message"
    properties:
      message:
        type: "string"
        description: "update ledger successfully"
    description: "successfully update ledger message"
  sla-store-body:
    type: "object"
    required:
    - "CPUPower"
    - "availability"
    - "bandwidth"
    - "connections"
    - "diskSpace"
    - "elasticity"
    - "memorySize"
    - "requestorID"
    - "responseTime"
    - "throughput"
    - "timeStamp"
    - "token"
    properties:
      requestorID:
        type: "string"
        description: "Identifier of the requesting entity."
      timeStamp:
        type: "string"
        description: "The timestamp in the following format - \"2006-01-02 15:04:05\"\
          ."
      token:
        type: "string"
        description: "A crypto token to validate if the entity is allowed to perform\
          \ the requested operation."
      availability:
        type: "string"
        description: "The percentage availability of the cloud member resources for\
          \ a billing cycle."
      responseTime:
        type: "string"
        description: "Exact time (seconds) between stimulus to the cloud service and\
          \ corresponding service's response. The percentage a service manages to\
          \ respond within the defined response time limit for a billing cycle."
      CPUPower:
        type: "string"
        description: "Max. no. of processing power (Hertz) provided by CSP to customer\
          \ to process his data."
      diskSpace:
        type: "string"
        description: "Max. no. of available space (PetaBytes) provided by CSP to customer\
          \ to store his data."
      memorySize:
        type: "string"
        description: "Max. no. of information (GigaBytes) the cloud service is able\
          \ to hold for the customer to read/write his data."
      bandwidth:
        type: "string"
        description: "Amount of outbound data transfers (GigaByte/month), customers\
          \ will be given the ability to customize the cloud services, and corresponding\
          \ SLAs, according to the demand and usage of the services."
      throughput:
        type: "string"
        description: "Min. no. of requests that can be processed by the cloud service\
          \ in a stated time period (GigaBytes/sec)."
      connections:
        type: "string"
        description: "Max. no. of simultaneous connections."
      elasticity:
        type: "string"
        description: "Quickly de/provision resources, dynamically adjust the amount\
          \ of resources allocated to an instance of a service (seconds to react)."
    description: "HTTP body defining the store operation for the /store endpoint."
  alert-store:
    type: "object"
    required:
    - "alertBody"
    - "alertID"
    - "alertSource"
    - "alertType"
    - "requestorID"
    - "token"
    properties:
      requestorID:
        type: "string"
        description: "Identifier of the requesting entity."
      token:
        type: "string"
        description: "A crypto token to validate if the entity is allowed to perform\
          \ the requested operation."
      alertID:
        type: "string"
        description: "Identifier of the alert."
      alertType:
        type: "string"
        description: "POLICY_VIOLATION_ALERT, created by the PVE, corresponds to an\
          \ alert regarding a policy violation. REQ_RESP_DISCREPANCY_ALERT, created\
          \ by the PVE, corresponds to an alert regarding a discrepancy of an XACML\
          \ request/response. AUDIT_ALERT, created by the FSA, corresponds to an alert\
          \ which is generated after performing offline analysis over the access control\
          \ logs.SLA_ALERT, created by FAM, corresponds to an alert which is generated\
          \ after an SLA violation is detected."
        enum:
        - "POLICY_VIOLATION_ALERT"
        - "REQ_RESP_DISCREPANCY_ALERT"
        - "AUDIT_ALERT"
        - "SLA_ALERT"
      alertSource:
        type: "string"
        description: "Refences the entity which has generated the alert."
        enum:
        - "PVE"
        - "FSA"
      alertBody:
        type: "string"
        description: "Base64 encoded alert."
    description: "HTTP body defining the store operation for the /store endpoint."
  alert-body:
    type: "object"
    required:
    - "alertBody"
    - "alertID"
    - "alertSource"
    - "alertType"
    properties:
      alertID:
        type: "string"
        description: "Identifier of the alert."
      alertType:
        type: "string"
        description: "POLICY_VIOLATION_ALERT, created by the PVE, corresponds to an\
          \ alert regarding a policy violation. REQ_RESP_DISCREPANCY_ALERT, created\
          \ by the PVE, corresponds to an alert regarding a discrepancy of an XACML\
          \ request/response. AUDIT_ALERT, created by the FSA, corresponds to an alert\
          \ which is generated after performing offline analysis over the access control\
          \ logs.SLA_ALERT, created by FAM, corresponds to an alert which is generated\
          \ after an SLA violation is detected."
        enum:
        - "POLICY_VIOLATION_ALERT"
        - "REQ_RESP_DISCREPANCY_ALERT"
        - "AUDIT_ALERT"
        - "SLA_ALERT"
      alertSource:
        type: "string"
        description: "Refences the entity which has generated the alert."
        enum:
        - "PVE"
        - "FSA"
      alertBody:
        type: "string"
        description: "Base64 encoded alert."
    description: "HTTP body defining the body of an alert"
  monitoring-store:
    type: "object"
    required:
    - "data"
    - "dataType"
    - "loggerID"
    - "monitoringID"
    - "requestorID"
    - "timeStamp"
    - "token"
    properties:
      requestorID:
        type: "string"
        description: "Identifier of a particular protocol flow which is used to bind\
          \ different access logs from different entities."
      token:
        type: "string"
        description: "A crypto token to validate if the entity is allowed to perform\
          \ the requested operation."
      monitoringID:
        type: "string"
        description: "Identifier of a particular protocol flow which is used to bind\
          \ different access logs from different entities. "
      loggerID:
        type: "string"
        description: "Identifier of the requesting entity."
      timeStamp:
        type: "string"
        description: "The timestamp in the following format - \"2006-01-02 15:04:05\"\
          ."
      dataType:
        type: "string"
        description: "REQUEST/RESPONE, can be one of these values.'"
        enum:
        - "REQUEST"
        - "RESPONSE"
      data:
        type: "string"
        description: "Base64 encoded XACML request/response."
    description: "HTTP body defining the store operation for the /store endpoint and\
      \ the read operation for the /read endpoint."
  monitoring-response:
    type: "object"
    required:
    - "monitoringID"
    - "requestorID"
    - "token"
    properties:
      requestorID:
        type: "string"
        description: "Identifier of the "
      token:
        type: "string"
        description: "A crypto token to validate if the entity is allowed to perform\
          \ the requested operation."
      monitoringID:
        type: "string"
        description: "Identifier of a particular protocol flow which is used to bind\
          \ different access logs from different entities. "
      list:
        type: "array"
        items:
          $ref: "#/definitions/monitoringresponse_list"
    description: "HTTP response containing the list of policies for the service."
  key-get-body:
    type: "object"
    required:
    - "keyType"
    properties:
      keyType:
        type: "string"
        description: "category of key to retrieve"
        enum:
        - "SERVICE"
        - "MEMBER"
        - "VM"
        - "TENANT"
    description: "HTTP response containing the list of keys for a category"
  key-response:
    type: "object"
    required:
    - "list"
    properties:
      list:
        type: "array"
        items:
          $ref: "#/definitions/keyresponse_list"
    description: "HTTP response containing the list of keys for a category"
  state-service-store-body:
    type: "object"
    required:
    - "name"
    - "protocol"
    - "requestorID"
    - "serviceID"
    - "tenantID"
    - "token"
    properties:
      requestorID:
        type: "string"
        description: "Identifier of the requesting entity."
      token:
        type: "string"
        description: "A crypto token to validate if the entity is allowed to perform\
          \ the requested operation."
      serviceID:
        type: "string"
        description: "Identifier of the service."
      tenantID:
        type: "string"
        description: "Identifier of the tenant."
      name:
        type: "string"
        description: "Name of the service."
      protocol:
        type: "string"
        description: "protocol used by the service."
    description: "HTTP body defining the service store operation"
  state-service-request-body:
    type: "object"
    required:
    - "name"
    - "protocol"
    - "serviceID"
    - "tenantID"
    properties:
      serviceID:
        type: "string"
        description: "Identifier of the service."
      tenantID:
        type: "string"
        description: "Identifier of the tenant."
      name:
        type: "string"
        description: "Name of the service."
      protocol:
        type: "string"
        description: "protocol used by the service."
    description: "HTTP body defining the service store operation"
  state-member-store-body:
    type: "object"
    required:
    - "id"
    - "name"
    - "requestorID"
    - "token"
    properties:
      requestorID:
        type: "string"
        description: "Identifier of the requesting entity."
      token:
        type: "string"
        description: "A crypto token to validate if the entity is allowed to perform\
          \ the requested operation."
      id:
        type: "string"
        description: "Identifier of the member cloud."
      name:
        type: "string"
        description: "Name of the service."
    description: "HTTP body defining the service store operation"
  state-member-request-body:
    type: "object"
    required:
    - "id"
    - "name"
    properties:
      id:
        type: "string"
        description: "Identifier of the member cloud."
      name:
        type: "string"
        description: "Name of the service."
    description: "HTTP body defining the service store operation"
  state-tenant-store-body:
    type: "object"
    required:
    - "id"
    - "name"
    - "requestorID"
    - "token"
    properties:
      requestorID:
        type: "string"
        description: "Identifier of the requesting entity."
      token:
        type: "string"
        description: "A crypto token to validate if the entity is allowed to perform\
          \ the requested operation."
      id:
        type: "string"
        description: "Identifier of the tenant."
      name:
        type: "string"
        description: "Name of the tenant."
    description: "HTTP body defining the service store operation"
  state-tenant-store-member-body:
    type: "object"
    required:
    - "cloudMemberID"
    - "id"
    properties:
      id:
        type: "string"
        description: "Identifier of the tenant to wich add the member cloud"
      cloudMemberID:
        type: "string"
        description: "Name of the cloud member to add to the tenant."
    description: "HTTP body defining the service store operation"
  state-vm-store-body:
    type: "object"
    required:
    - "cloudMemberID"
    - "disk"
    - "id"
    - "name"
    - "os"
    - "requestorID"
    - "token"
    properties:
      requestorID:
        type: "string"
        description: "Identifier of the requesting entity."
      token:
        type: "string"
        description: "A crypto token to validate if the entity is allowed to perform\
          \ the requested operation."
      id:
        type: "string"
        description: "Identifier of the vm."
      name:
        type: "string"
        description: "Name of the vm."
      os:
        type: "string"
        description: "Name of the os of the vm."
      disk:
        type: "string"
        description: "Description of the disk of the vm."
      cloudMemberID:
        type: "string"
        description: "Name of the cloud member owner of the id."
    description: "HTTP body defining the service store operation"
  state-vm-request-body:
    type: "object"
    required:
    - "cloudMemberID"
    - "disk"
    - "id"
    - "name"
    - "os"
    properties:
      id:
        type: "string"
        description: "Identifier of the vm."
      name:
        type: "string"
        description: "Name of the vm."
      os:
        type: "string"
        description: "Name of the os of the vm."
      disk:
        type: "string"
        description: "Description of the disk of the vm."
      cloudMemberID:
        type: "string"
        description: "Name of the cloud member owner of the id."
    description: "HTTP body defining the service store operation"
  state-tenant-request-body:
    type: "object"
    required:
    - "cloudMemberIDs"
    - "id"
    - "name"
    properties:
      id:
        type: "string"
        description: "Identifier of the member cloud."
      name:
        type: "string"
        description: "Name of the service."
      cloudMemberIDs:
        type: "array"
        description: "list of member cloud ids in the tenant"
        items:
          $ref: "#/definitions/statetenantrequestbody_cloudMemberIDs"
    description: "HTTP body defining the service store operation"
  submit-proposal-body:
    type: "object"
    required:
    - "proposalDescription"
    - "proposalID"
    - "proposalQuorum"
    - "proposalStatus"
    - "proposalType"
    - "requestorID"
    - "votersNumber"
    properties:
      requestorID:
        type: "string"
        description: "Identifier of the requesting entity."
      proposalID:
        type: "string"
        description: "identifier of the proposal."
      proposalDescription:
        type: "string"
        description: "body of the proposal."
      proposalType:
        type: "string"
        description: "It defines what is the type of the proposal"
        enum:
        - "join"
        - "leave"
        - "update"
      proposalQuorum:
        type: "string"
        description: "It defines what is the quorumdesired quorum for the submitted\
          \ proposal"
        enum:
        - "unanimity"
        - "majority"
        - "oneThird"
      proposalStatus:
        type: "string"
        description: "It indicates the curent status of a proposal at the beginning\
          \ will be submitted as \"pending\", after a vote session become \"accepted\"\
          \ or \"rejected\""
        enum:
        - "pending"
        - "accepted"
        - "rejected"
      votersNumber:
        type: "string"
        description: "It defines what is the quorumdesired quorum for the submitted\
          \ proposal"
    description: "body for sumitting a porposal for the federation"
  vote-proposal-body:
    type: "object"
    required:
    - "memberID"
    - "proposalID"
    - "vote"
    properties:
      memberID:
        type: "string"
        description: "Identifier of the voter member."
      proposalID:
        type: "string"
        description: "identifier of the proposal."
      vote:
        type: "string"
        description: "body of the proposal."
    description: "vote for a submitted proposal."
  countvotes-proposal-body:
    type: "object"
    required:
    - "proposalID"
    properties:
      proposalID:
        type: "string"
        description: "identifier of the proposal."
    description: "request a votes counting to validate the proposal"
  countvotes-proposal-response:
    type: "object"
    required:
    - "proposalID"
    - "proposalStatus"
    - "requestorID"
    properties:
      requestorID:
        type: "string"
        description: "Identifier of the requesting entity."
      proposalID:
        type: "string"
        description: "identifier of the proposal."
      proposalStatus:
        type: "string"
        description: "It indicates the curent status of a proposal at the beginning\
          \ will be submitted as \"pending\", after a vote session become \"accepted\"\
          \ or \"rejected\""
        enum:
        - "pending"
        - "accepted"
        - "rejected"
    description: "response message body of the countVote function"
  get-proposal-body:
    type: "object"
    required:
    - "proposalID"
    properties:
      proposalID:
        type: "string"
        description: "Identifier of the proposal."
    description: "body for getting a porposal to vote by the federated member."
  get-proposal-response:
    type: "object"
    required:
    - "proposalDescription"
    - "proposalID"
    - "proposalQuorum"
    - "proposalStatus"
    - "proposalType"
    - "requestorID"
    - "votersNumber"
    properties:
      requestorID:
        type: "string"
        description: "Identifier of the requesting entity."
      proposalID:
        type: "string"
        description: "identifier of the proposal."
      proposalDescription:
        type: "string"
        description: "body of the proposal."
      proposalType:
        type: "string"
        description: "It defines what is the type of the proposal"
        enum:
        - "join"
        - "leave"
        - "update"
      proposalQuorum:
        type: "string"
        description: "It defines what is the quorumdesired quorum for the submitted\
          \ proposal"
        enum:
        - "unanimity"
        - "majority"
        - "oneThird"
      proposalStatus:
        type: "string"
        description: "It indicates the curent status of a proposal at the beginning\
          \ will be submitted as \"pending\", after a vote session become \"accepted\"\
          \ or \"rejected\""
        enum:
        - "pending"
        - "accepted"
        - "rejected"
      votersNumber:
        type: "string"
        description: "It defines what is the quorumdesired quorum for the submitted\
          \ proposal"
    description: "response message body of the getProposal function"
  query-request:
    type: "object"
    required:
    - "dataId"
    - "requestorID"
    - "token"
    properties:
      requestorID:
        type: "string"
        description: "Identifier of the requesting entity."
      token:
        type: "string"
        description: "A crypto token to validate if the entity is allowed to perform\
          \ the requested operation."
      dataId:
        type: "string"
        description: "Data of interest"
    description: "HTTP body defining the read operation for the /read endpoint"
  ack-response:
    type: "object"
    required:
    - "message"
    properties:
      message:
        type: "string"
        description: "A message signifying that the request action has been successfully\
          \ executed"
    description: "HTTP response for a successful store operation"
  policyofserviceresponse_list:
    required:
    - "policy"
    - "policyId"
    properties:
      policyId:
        type: "string"
        description: "Specifies the id of the policy."
      policy:
        type: "string"
        description: "BASE64-enocded data of the policy."
  monitoringresponse_list:
    required:
    - "data"
    - "dataType"
    - "loggerID"
    - "timeStamp"
    properties:
      loggerID:
        type: "string"
        description: "Identifier of the requesting entity."
      timeStamp:
        type: "string"
        description: "The timestamp in the following format - \"2006-01-02 15:04:05\"\
          ."
      dataType:
        type: "string"
        description: "REQUEST/RESPONE, can be one of these values.'"
        enum:
        - "REQUEST"
        - "RESPONSE"
      data:
        type: "string"
        description: "Base64 encoded XACML request/response."
  keyresponse_list:
    required:
    - "keyId"
    properties:
      keyId:
        type: "string"
        description: "Specifies the key id."
  statetenantrequestbody_cloudMemberIDs:
    required:
    - "memberId"
    properties:
      memberId:
        type: "string"
        description: "Specifies the id of the membet."
