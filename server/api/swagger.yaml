---
swagger: "2.0"
info:
  version: "2.1.0"
  title: "SUNFISH Registry Interface"
  contact:
    name: "Andrea Margheri"
    email: "a.margheri@soton.ac.uk"
basePath: "/ri"
tags:
- name: "policy"
- name: "dm"
- name: "anony"
- name: "contract"
- name: "alert"
- name: "monitoring"
- name: "sla"
- name: "state"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /policy/store:
    post:
      tags:
      - "policy"
      description: "Storing a new policy\n"
      operationId: "policyStorePOST"
      parameters:
      - in: "body"
        name: "policySpec"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/policy-request-body"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/policy-response"
        400:
          description: "Invalid request, required parameter(s) missing."
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
        409:
          description: "The operation is not allowed as the policy already exists."
      x-swagger-router-controller: "Policy"
  /policy/read:
    post:
      tags:
      - "policy"
      description: "Retrieving a policy by its id\n"
      operationId: "policyReadPOST"
      parameters:
      - in: "body"
        name: "policyId"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/query-request"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/policy-response"
        400:
          description: "Invalid request, required parameter(s) missing"
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
        404:
          description: "The requested policy is not found."
      x-swagger-router-controller: "Policy"
  /policy/polService:
    post:
      tags:
      - "policy"
      description: "Retrieving policies associated to a service\n"
      operationId: "policyPolServicePOST"
      parameters:
      - in: "body"
        name: "serviceId"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/policy-ofservice-body"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/policy-ofservice-response"
        400:
          description: "Invalid request, required parameter(s) missing"
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
      x-swagger-router-controller: "Policy"
  /policy/delete:
    post:
      tags:
      - "policy"
      description: "Deleting a policy by its id\n"
      operationId: "policyDeletePOST"
      parameters:
      - in: "body"
        name: "policyId"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/query-request"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/ack-response"
        400:
          description: "Invalid request, required parameter(s) missing"
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
        404:
          description: "The respective policy is not found."
      x-swagger-router-controller: "Policy"
  /dm/store:
    post:
      tags:
      - "dm"
      description: "Storing encryption/tokenization key\n"
      operationId: "dmStorePOST"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/dm-store-body"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/ack-response"
        400:
          description: "Invalid request, required parameter(s) missing."
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
      x-swagger-router-controller: "Dm"
  /dm/read:
    post:
      tags:
      - "dm"
      description: "Retrieving a stored key\n"
      operationId: "dmReadPOST"
      parameters:
      - in: "body"
        name: "body"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/query-request"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/dm-read-response"
        400:
          description: "Invalid request, required parameter(s) missing"
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
      x-swagger-router-controller: "Dm"
  /dm/delete:
    post:
      tags:
      - "dm"
      description: "Delete a stored key\n"
      operationId: "dmDeletePOST"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/dm-delete-body"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/ack-response"
        400:
          description: "Invalid request, required parameter(s) missing"
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
      x-swagger-router-controller: "Dm"
  /anonymisation/register:
    post:
      tags:
      - "anonymisation"
      description: "This endpoint is used to register a data-sharing event.\n"
      operationId: "registerToRegistry"
      parameters:
      - in: "body"
        name: "body"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/anony-register-body"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/anony-register-response"
        400:
          description: "Invalid request, required parameter(s) missing."
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
      x-swagger-router-controller: "Anonymisation"
  /anonymisation/queryOldRes:
    post:
      tags:
      - "anonymisation"
      description: "This endpoint is used to query the anonymised statistical result in Registry\
        \ given  the DataId and requested budget.\n"
      operationId: "queryOldRes"
      parameters:
      - in: "body"
        name: "body"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/anony-query-body"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/anony-query-response"
        400:
          description: "Invalid request, required parameter(s) missing"
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)"
      x-swagger-router-controller: "Anonymisation"
  
  /anonymisation/receiveAnonyRes:
    post:
      description: this endpoint is used to receive anonymised result from the anonymisation interface
      tags:
        - anonymisation
      operationId: reeciveAnonyRes
      parameters:
        - name: body
          in: body
          description: JSON body of the received result
          required: true
          schema:
            $ref: "#/definitions/anony-result-body"
      response:
        200:
          description: Success
          schema:
            $ref: "#/definitions/receive-result-response"
        400:
          description: "Invalid request, required parameter(s) missing"
        401:
          description: "The operation is not allowed (unauthorised access, the token \
                        \ is invalid, etc.)"
      x-swagger-router-controller: "Anonymisation"

  /SLAMetrics/store:
    post:
      tags:
      - "sla"
      description: "This endpoint is used to store performance metrics.\n"
      operationId: "sLAMetricsStorePOST"
      parameters:
      - in: "body"
        name: "body"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/sla-store-body"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/sla-store-response"
        400:
          description: "Invalid request, required parameter(s) missing."
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
      x-swagger-router-controller: "Sla"
  /SLAMetrics/read:
    post:
      tags:
      - "sla"
      description: "This endpoint is used to retrieve the stored metrics using the\
        \ index.\n"
      operationId: "sLAMetricsReadPOST"
      parameters:
      - in: "body"
        name: "body"
        description: "Body in JSON"
        required: true
        schema:
          $ref: "#/definitions/sla-read-body"
      responses:
        200:
          description: "The response body for a successful response."
          schema:
            $ref: "#/definitions/sla-read-response"
        400:
          description: "Invalid request, required parameter(s) missing."
        401:
          description: "The operation is not allowed (unauthorised access, the token\
            \ is invalid, etc.)."
      x-swagger-router-controller: "Sla"

definitions:
  policy-request-body:
    type: "object"
    required:
    - "expirationTime"
    - "id"
    - "policy"
    - "requestorID"
    - "token"
    properties:
      requestorID:
        type: "string"
        description: "Identifier of the requesting entity."
      token:
        type: "string"
        description: "A crypto token to validate if the entity is allowed to perform\
          \ the requested operation."
      policy:
        type: "string"
        description: "Base64-encoded policy data."
      expirationTime:
        type: "string"
        description: "Specifies the expiration time of the policy in milli-seconds\
          \ starting from midnight, January 1, 1970 UTC. After this time the policy\
          \ set must not be used."
      id:
        type: "string"
        description: "The identifer for the policy."
      serviceID:
        type: "string"
        description: "The identifier of the service this policy applies to."
      policyType:
        type: "string"
        description: "The type of the policy."
    description: "HTTP body defining the input for the store operation of policy"
  policy-ofservice-body:
    type: "object"
    required:
    - "policyType"
    - "requestorID"
    - "serviceID"
    - "token"
    properties:
      requestorID:
        type: "string"
        description: "Identifier of the requesting entity."
      token:
        type: "string"
        description: "A crypto token to validate if the entity is allowed to perform\
          \ the requested operation."
      serviceID:
        type: "string"
        description: "Specifies the service identifier to be used to retrieve the\
          \ set of policies belonging to that identifier."
      policyType:
        type: "string"
        description: "The type of the policy."
    description: "HTTP body defining the read operation for the /read endpoint"
  policy-response:
    type: "object"
    required:
    - "expirationTime"
    - "policy"
    properties:
      policy:
        type: "string"
        description: "BASE64-enocded data of the requested policy."
      expirationTime:
        type: "string"
        description: "Specifies the expiration time of the policy set in milliseconds\
          \ starting from midnight, January 1, 1970 UTC. After this time the policy\
          \ set must not be used."
    description: "HTTP response for a successful read operation"
  policy-ofservice-response:
    type: "object"
    required:
    - "list"
    properties:
      list:
        type: "array"
        items:
          $ref: "#/definitions/policyofserviceresponse_list"
    description: "HTTP response containing the list of policies for the service."
  dm-store-body:
    type: "object"
    required:
    - "dataID"
    - "key"
    - "requestorID"
    - "timestamp"
    - "token"
    properties:
      requestorID:
        type: "string"
        description: "Identifier of the requesting entity."
      token:
        type: "string"
        description: "A crypto token to validate if the entity is allowed to perform\
          \ the requested operation."
      timestamp:
        type: "string"
        description: "timestamp of registering the key."
      dataID:
        type: "string"
        description: "Identifier of the dataset that the key relates to."
      key:
        type: "string"
        description: "Key to be registered."
  dm-delete-body:
    type: "object"
    required:
    - "index"
    - "requestorID"
    - "token"
    properties:
      requestorID:
        type: "string"
        description: "Identifier of the requesting entity."
      token:
        type: "string"
        description: "A crypto token to validate if the entity is allowed to perform\
          \ the requested operation."
      index:
        type: "integer"
        description: "Identifier of the key."
  dm-read-response:
    type: "object"
    required:
    - "dataID"
    - "key"
    - "timestamp"
    properties:
      timestamp:
        type: "string"
        description: "The timestamp of registering the key."
      dataID:
        type: "string"
        description: "Identifier of the dataset."
      key:
        type: "string"
        description: "The requested public key."
    description: "HTTP response for a successful read operation"
  anony-register-body:
    type: "object"
    required:
    - "requestorID"
    - "token"
    - "data_provider"
    - "data_consumer"
    - "time_stamp"
    - "dataID"
    properties:
      requestorID:
        type: "string"
        description: "Identifier of the requesting entity."
      token:
        type: "string"
        description: "A crypto token to validate if the entity is allowed to perform\
          \ the requested operation."
      data_provider:
        type: "string"
        description: "The name of the data provider who shares a dataset."
      data_consumer:
        type: "string"
        description: "The name of the data consumer who receives a dataset."
      time_stamp:
        type: "string"
        description: "The timestamp in the following format - \"2006-01-02 15:04:05\""
      dataID:
        type: "string"
        description: "Identifier of the shared dataset."
    description: "HTTP body defining the register operation for the /anonymisation/register\
      \ endpoint."
  anony-register-response:
    type: "object"
    required:
    - "message"
    properties:
      message:
        type: "string"
        description: "a message in JSON format signifying that the data has been registered."
    description: "HTTP response for a successful register operation"
  anony-query-body:
    type: "object"
    required:
    - "requestorID"
    - "token"
    - "data_consumer"
    - "dataID"
    - "function_type"
    - "request_budget"
    properties:
      requestorID:
        type: "string"
        description: "Identifier of the requesting entity."
      token:
        type: "string"
        description: "A crypto token to validate if the entity is allowed to perform\
          \ the requested operation."
      data_consumer:
        type: "string"
        description: "The name of the data consumer who receives a dataset."
      dataID:
        type: "string"
        description: "The unique ID of a dataset"
      function_type:
        type: "string"
        description: "The queried function type"
      request_budget:
        type: "number"
        description: "The requested budget of differential privacy"
    description: "HTTP body defining the query operation for the /anonymisation/queryOldRes\
      \ endpoint"
  anony-query-response:
    type: "object"
    required:
    - "data_provider"
    - "data_consumer"
    - "time_stamp"
    - "dataID"
    - "ifExist"
    - "budget_used"
    properties:
      data_provider:
        type: "string"
        description: "The name of the data provider who shares a dataset."
      data_consumer:
        type: "string"
        description: "The name of the data consumer who receives a dataset."
      time_stamp:
        type: "string"
        description: "The timestamp in the following format - \"2006-01-02 15:04:05\""
      dataID:
        type: "string"
        description: "Identifier of the shared dataset."
      ifExist:
        type: "number"
        description: 0 -- old result does not exist; otherwise -- 1
      budget_used:
        type: "number"
        description: budget consumed
    description: "HTTP response for a successful read operation"

  anony-result-body:
    type: object
    description: HTTP body definiting the query operation for the 
                  /ri/anonymisation/receiveAnonyRes endpoint
    required:
      - requestorID
      - token
      - data_consumer
      - dataID
      - function_type
      - budget_used
      - anonymised_result
    properties:
      requestorID:
        type: string
        description: Indentifier of the requesting body
      token:
        type: string
        description: a crypto token to validate if the entity is allowed to perform the 
                      requested operation.
      data_consumer: 
        type: string
        description: the name of the data consumer who receives a dataset
      dataID:
        type: string
        description: the unique ID of a dataset
      function_type:
        type: string
        description: the queried function type
      budget_used: 
        type: number
        description: the budget used of differential privacy
      anonymised_result:
        type: number
        description: the anonymised result from anonymisation interface

  receive-result-response:
    type: object
    description: HTTP response definiting the query operation for the 
                  /ri/anonymisation/receiveAnonyRes endpoint
    required:
      - final_status
      - final_result
    properties:
      final_status: 
        type: number
        description: the statue of the final result (0 -- null result)
      final_result:
        type: number
        description: the anonymised result from anonymisation interface
        
  sla-store-body:
    type: "object"
    required:
    - "CPUPower"
    - "availability"
    - "bandwidth"
    - "connections"
    - "diskSpace"
    - "elasticity"
    - "memorySize"
    - "requestorID"
    - "responseTime"
    - "throughput"
    - "timeStamp"
    - "token"
    properties:
      requestorID:
        type: "string"
        description: "Identifier of the requesting entity."
      timeStamp:
        type: "string"
        description: "The timestamp in the following format - \"2006-01-02 15:04:05\"\
          ."
      token:
        type: "string"
        description: "A crypto token to validate if the entity is allowed to perform\
          \ the requested operation."
      availability:
        type: "string"
        description: "The percentage availability of the cloud member resources for\
          \ a billing cycle."
      responseTime:
        type: "string"
        description: "Exact time (seconds) between stimulus to the cloud service and\
          \ corresponding service's response. The percentage a service manages to\
          \ respond within the defined response time limit for a billing cycle."
      CPUPower:
        type: "string"
        description: "Max. no. of processing power (Hertz) provided by CSP to customer\
          \ to process his data."
      diskSpace:
        type: "string"
        description: "Max. no. of available space (PetaBytes) provided by CSP to customer\
          \ to store his data."
      memorySize:
        type: "string"
        description: "Max. no. of information (GigaBytes) the cloud service is able\
          \ to hold for the customer to read/write his data."
      bandwidth:
        type: "string"
        description: "Amount of outbound data transfers (GigaByte/month), customers\
          \ will be given the ability to customize the cloud services, and corresponding\
          \ SLAs, according to the demand and usage of the services."
      throughput:
        type: "string"
        description: "Min. no. of requests that can be processed by the cloud service\
          \ in a stated time period (GigaBytes/sec)."
      connections:
        type: "string"
        description: "Max. no. of simultaneous connections."
      elasticity:
        type: "string"
        description: "Quickly de/provision resources, dynamically adjust the amount\
          \ of resources allocated to an instance of a service (seconds to react)."
    description: "HTTP body defining the store operation for the /store endpoint."
  sla-read-body:
    type: "object"
    required:
    - "index"
    - "requestorID"
    - "token"
    properties:
      requestorID:
        type: "string"
        description: "Identifier of the requesting entity."
      token:
        type: "string"
        description: "A crypto token to validate if the entity is allowed to perform\
          \ the requested operation."
      index:
        type: "integer"
        description: "Index of the requested data as provided during the store operation."
    description: "HTTP body defining the read operation for the /read endpoint."
  sla-store-response:
    type: "object"
    required:
    - "index"
    properties:
      index:
        type: "integer"
        description: "index of the stored metrics."
    description: "HTTP response for a successful store operation."
  sla-read-response:
    type: "object"
    required:
    - "CPUPower"
    - "availability"
    - "bandwidth"
    - "connections"
    - "diskSpace"
    - "elasticity"
    - "memorySize"
    - "requestorID"
    - "responseTime"
    - "throughput"
    - "timeStamp"
    - "token"
    properties:
      requestorID:
        type: "string"
        description: "Identifier of the requesting entity."
      timeStamp:
        type: "string"
        description: "The timestamp in the following format - \"2006-01-02 15:04:05\"\
          ."
      token:
        type: "string"
        description: "A crypto token to validate if the entity is allowed to perform\
          \ the requested operation."
      availability:
        type: "string"
        description: "The percentage availability of the cloud member resources for\
          \ a billing cycle."
      responseTime:
        type: "string"
        description: "Exact time (seconds) between stimulus to the cloud service and\
          \ corresponding service's response. The percentage a service manages to\
          \ respond within the defined response time limit for a billing cycle."
      CPUPower:
        type: "string"
        description: "Max. no. of processing power (Hertz) provided by CSP to customer\
          \ to process his data."
      diskSpace:
        type: "string"
        description: "Max. no. of available space (PetaBytes) provided by CSP to customer\
          \ to store his data."
      memorySize:
        type: "string"
        description: "Max. no. of information (GigaBytes) the cloud service is able\
          \ to hold for the customer to read/write his data."
      bandwidth:
        type: "string"
        description: "Amount of outbound data transfers (GigaByte/month), customers\
          \ will be given the ability to customize the cloud services, and corresponding\
          \ SLAs, according to the demand and usage of the services."
      throughput:
        type: "string"
        description: "Min. no. of requests that can be processed by the cloud service\
          \ in a stated time period (GigaBytes/sec)."
      connections:
        type: "string"
        description: "Max. no. of simultaneous connections."
      elasticity:
        type: "string"
        description: "Quickly de/provision resources, dynamically adjust the amount\
          \ of resources allocated to an instance of a service (seconds to react)."
    description: "HTTP response for a successful read operation."
  query-request:
    type: "object"
    required:
    - "id"
    - "requestorID"
    - "token"
    properties:
      requestorID:
        type: "string"
        description: "Identifier of the requesting entity."
      token:
        type: "string"
        description: "A crypto token to validate if the entity is allowed to perform\
          \ the requested operation."
      id:
        type: "integer"
        description: "Identifier of the element of interest"
    description: "HTTP body defining the read operation for the /read endpoint"
  ack-response:
    type: "object"
    required:
    - "message"
    properties:
      message:
        type: "string"
        description: "A message signifying that the request action has been successfully\
          \ executed"
    description: "HTTP response for a successful store operation"
  policyofserviceresponse_list:
    required:
    - "id"
    - "policy"
    properties:
      id:
        type: "string"
        description: "Specifies the id of the policy."
      policy:
        type: "string"
        description: "BASE64-enocded data of the policy."
