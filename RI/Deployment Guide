1) Prepare the hosting machine by following the instructions at http://hyperledger-fabric.readthedocs.io/en/latest/prereqs.html

2) Setup your GOPATH environment variable as required.

3) Clone the Registry Interface project using the following command:

	git clone https://github.com/sunfish-prj/Registry-Interface.git

4) cd into Registry-Interface/RI directory.

5) Copy the "github.com" directory from the "Registry-Interface" directory to $GOPATH/src/

6) Issue the following command to make shell scripts executable:

	chmod a+x channel_test.sh deployAll.sh stop.sh

7) Issue the following command to install the required node packages:

	npm install

8) Update the "goPath" config field in Registry-Interface/RI/config.json with the go path directory of the host (as printed by the "echo $GOPATH" command)

9) Update the "dockerIP" config field in Registry-Interface/RI/config.ini with the IP address of the docker interface (for ubuntu, use the ifconfig command to get the IP address of the docker interface for the host machine)

10) Within the Registry-Interface/RI directory, issue the following command in a terminal. This creates the fabric blockchain and initiates and deploys the required entities for the particular blockchain.

	docker-compose -f dockerCompose.yml up -d

11) In another terminal, use the command "docker exec -it cli bash" to connect to the cli container and then issue: "more results.txt". Repeat "more results.txt" until the following outputs are printed. This ensures that all peers have joined the created channel.

SUCCESSFUL CHANNEL CREATION
SUCCESSFUL JOIN CHANNEL on PEER0
SUCCESSFUL JOIN CHANNEL on PEER1
SUCCESSFUL JOIN CHANNEL on PEER2

12) In different terminals, the following commands can be used to trace the logs of the orderer and peer0 (or peer1/peer2 by changing the respective value) respectively :

docker logs -f orderer

docker logs -f peer0

13) In another terminal, within the Registry-Interface/RI directory, the following command needs to be issued to deploy the required smart contracts (chaincode):

	./deployAll.sh

14) Wait until the following output is printed. This confirms that the smart contract has been successfully deployed in the fabric blockchain. This output will be repeated all each chaincode.

	The chaincode transaction has been successfully committed

15) In the same terminal (or in a different terminal), within the Registry-Interface/RI directory, the following command needs to be issued. This starts the node server for the registry interface, listening at port 8075.

node ri.js

16) Wait until the 'server started' output is printed in the terminal. This indicates that the node server for RI has been successfully started.

17) Test the interface by registering, retrieving, updating and deleting some dummy data, use the test cases from the from the testCases file. For these test cases, docker_IP needs to be updated accordingly. The in/index field needs to be updated accordingly for reading from the interface.

18) To get the output of the smart-contract, the following command can be issued after a single data has been registered/stored. Here, "..." represents the corresponding container name.

docker logs -f peer0-peer0... 

19) Once finished, issue the following command to stop and remove the fabric containers:

	./stop.sh

20) Repeat the steps from step 10 to deploy the smart contracts and utilise the ri.

21) To enable the interactions between the RI and FRM/FAM, a separate instance of RI for any infrastructure is provided in the Registry-Interface/INF_RI directory. This needs to be deployed following the instructions provided in that directory.